% Compile minis automatically

% inputFiles = {'fafTarget.mat', 'minisZoom.m', 'fafTest.m', 'multiErrorBounds.m',...
%               'figureMinis.m', 'negativeFitness.m', 'Play-icon.png', 'filterMinis.m',...
%               'noiseFilterDlg.m', 'abf2bin.m', 'findFile.m', 'optimiseMinis.m',...
%               'abfload.m', 'finiteCableLumped.m', 'packagingPipeline.m',...
%               'averageWaveEffect.m', 'fitPostEval.m', 'peel.m', 'averageWaveform.m',...
%               'fitPreEval.m', 'plotCompare.m', 'averageWaveformTau.m',...
%               'fitnessCore.m', 'plotData.m', 'calcExcludedTimes.m', 'fitnessEval.m',...
%               'plotError.m', 'calcRT.m', 'fitnessMinis.m', 'plotMinis.m',...
%               'changeParametersGUI.fig', 'fitnessMulti.m', 'plotSaveFP.m',...
%               'changeParametersGUI.m', 'fitnessSingle.m', 'plotabf.m',...
%               'classifyMinis.m', 'gsmooth.m', 'preprocessMinis.fig',...
%               'classifyMinisNeg.m', 'hist2d.m', 'preprocessMinis.m', 'cleanUp.m',...
%               'initClassParam.m', 'pvpmod.m', 'compareMinis.m', 'initDetectParam.m',...
%               'readBinary.m', 'compareSweeps.m', 'initExclTimesNoise.m',...
%               'resimulateMinis.m', 'compareSweepsAmps.m', 'initExclTimesTarget.m',...
%               'retrieveMinis.m', 'compareSweepsAmpsOptim.m', 'initGlitchNoise.m',...
%               'runsFitness.m', 'compareSweepsOptim.m', 'initGlitchTarget.m',...
%               'saveErrorBounds.m', 'compareSweepsPartial.m', 'initOptimParam.m',...
%               'saveEventLog.m', 'compareUneqSweeps.m', 'initParallelisation.m',...
%               'saveTargetEventLog.m', 'cropData.m', 'initPulseNoise.m',...
%               'simulateDetectEvaluate.m', 'customOutput.m', 'initPulseTarget.m',...
%               'simulateMinis.m', 'customPlotGA.m', 'initSimParam.m', 'smoothMinis.m',...
%               'dataMinis.m', 'initSimParamReduced.m', 'splashScreen.jpg', 'dataSD.m',...
%               'initWaveform.m', 'stdMinis.m', 'deconvMinis.m', 'loadABF.m',...
%               'stop-red-icon.png', 'detectCliff.m', 'loadabf_deprecated.m',...
%               'strarray2numarray.m', 'detectMinis.m', 'manualFitMinisGUI.fig',...
%               'testExcludedTimes.m', 'detectMinisStandalone.m', 'manualFitMinisGUI.m',...
%               'testMatlab.m', 'doublePeel.m', 'manualFittingMinis.m',...
%               'testMatlab_preload.m', 'dprime_simple.m', 'minis.fig', 'testPython.py',...
%               'errorAmps.m', 'minis.m', 'testPython_preload.py', 'errorMinis.fig',...
%               'minisCompile.m', 'thrMinis.m', 'errorMinis.m', 'minisDistribution.m',...
%               'validateInput.m', 'estErrBounds.m', 'minisHeadless.m', 'writeABF.m',...
%               'estErrBounds2.m', 'minisInit.m', 'writeBinary.m', 'estimateNoiseMinis.m',...
%               'writeabf_deprecated.m', 'estimateSDs.m', 'minisOptions.fig',...
%               'fafNoise.mat', 'minisOptions.m', 'fafSettings.mat', 'minisPan.m'};
% 
% options = {};
% 
% mcc('-m', options, inputFiles{:});

% Find the repo and root folders
repoFolderName = 'minis';
cfd = mfilename('fullpath');
if isempty(cfd)
  cfd = pwd;
end
startInd = strfind(cfd, repoFolderName);
if isempty(startInd)
  error('Repo folder is not on the path');
end
repoFolder = cfd(1:startInd+numel(repoFolderName)-1);
cd(repoFolder);
rootFolder = fileparts(repoFolder);

% Edit detectMinis file replacing the hard-drive serial number
edit detectMinis.m

% Then execute this bit of code
pcode('detectMinis.m');
movefile('detectMinis.p',[rootFolder filesep 'minisPcode' filesep]);

% Execute all three prj files
%cd C:\Users\44079\code_repositories\minisTrial % minisTrial.prj
cd([rootFolder filesep 'minisStandalone']); % minis.prj
cd([rootFolder filesep 'minisMatlab']); % minisMatlab.prj
cd([rootFolder filesep 'minisPy']); % minisPy.prj

% Finally run this piece of code
minisStandaloneTargetFolder = [rootFolder filesep 'minis_for_redistribution' filesep 'minis'];
if ~exist(minisStandaloneTargetFolder, 'dir')
  mkdir(minisStandaloneTargetFolder);
end
if ispc
  copyfile([rootFolder filesep 'minisStandalone' filesep 'for_redistribution' filesep 'minisInstaller_web.exe'],...
    [minisStandaloneTargetFolder filesep],'f');
elseif ismac
  copyfile([rootFolder filesep 'minisStandalone' filesep 'for_redistribution' filesep 'minisInstaller_web.app'],...
    [minisStandaloneTargetFolder filesep 'minisInstaller_web.app'],'f');
elseif isunix
  copyfile([rootFolder filesep 'minisStandalone' filesep 'for_redistribution' filesep 'minisInstaller_web.install'],...
    [minisStandaloneTargetFolder filesep],'f');
end

minisMatlabTargetFolder = [rootFolder filesep 'minis_for_redistribution' filesep 'minisMatlab'];
if ~exist(minisMatlabTargetFolder, 'dir')
  mkdir(minisMatlabTargetFolder);
end
copyfile([rootFolder filesep 'minisMatlab' filesep 'minisMatlab.mlappinstall'],...
    [minisMatlabTargetFolder filesep],'f');
copyfile([repoFolder filesep 'testMatlab*'],...
    [minisMatlabTargetFolder filesep],'f');

minisPyTargetFolder = [rootFolder filesep 'minis_for_redistribution' filesep 'minisPy'];
if ~exist(minisPyTargetFolder, 'dir')
  mkdir([minisPyTargetFolder filesep 'installer']);
  mkdir([minisPyTargetFolder filesep 'python_files']);
end
if ispc
  copyfile([rootFolder filesep 'minisPy' filesep 'for_redistribution' filesep 'minisPyInstaller_web.exe'],...
    [minisPyTargetFolder filesep 'installer' filesep],'f');
elseif ismac
  copyfile([rootFolder filesep 'minisPy' filesep 'for_redistribution' filesep 'minisPyInstaller_web.app'],...
    [minisPyTargetFolder filesep 'installer' filesep 'minisPyInstaller_web.app'],'f');
elseif isunix
  copyfile([rootFolder filesep 'minisPy' filesep 'for_redistribution' filesep 'minisPyInstaller_web.install'],...
    [minisPyTargetFolder filesep 'installer' filesep],'f');
end
copyfile([rootFolder filesep 'minisPy' filesep 'for_redistribution_files_only' filesep '*'],...
    [minisPyTargetFolder filesep 'python_files' filesep],'f');
copyfile([repoFolder filesep 'testPython*'],...
    [minisPyTargetFolder filesep 'python_files' filesep],'f');

cd(rootFolder);
zip('minis_for_redistribution_Mackenna_Wollet.zip',...
    [rootFolder filesep 'minis_for_redistribution'])